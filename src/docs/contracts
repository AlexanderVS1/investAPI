syntax = "proto3";

package tinkoff.public.invest.api.contract.v1;

option go_package = "Tinkoff/investAPI";
option java_package = "ru.tinkoff.piapi.contract.v1";
option java_multiple_files = true;
option csharp_namespace = "Tinkoff.InvestAPI.V1";
option objc_class_prefix = "TIAPI";
option php_namespace = "Tinkoff\\Invest\\V1";

// Денежная сумма в определенной валюте
message MoneyValue {

  // строковый ISO-код валюты
  string currency = 1;

  // целая часть суммы, может быть отрицательным числом
  int64 units = 2;

  // дробная часть суммы, может быть отрицательным числом
  int32 nano = 3;
}

// Котировка - денежная сумма без указания валюты
message Quotation {

  // целая часть суммы, может быть отрицательным числом
  int64 units = 1;

  // дробная часть суммы, может быть отрицательным числом
  int32 nano = 2;
}

// Режим торгов инструмента
enum SecurityTradingStatus {
  SECURITY_TRADING_STATUS_UNSPECIFIED = 0; //Торговый статус не определён
  SECURITY_TRADING_STATUS_NOT_AVAILABLE_FOR_TRADING = 1; //Недоступен для торгов
  SECURITY_TRADING_STATUS_OPENING_PERIOD = 2; //Период открытия торгов
  SECURITY_TRADING_STATUS_CLOSING_PERIOD = 3; //Период закрытия торгов
  SECURITY_TRADING_STATUS_BREAK_IN_TRADING = 4; //Перерыв в торговле
  SECURITY_TRADING_STATUS_NORMAL_TRADING = 5; //Нормальная торговля
  SECURITY_TRADING_STATUS_CLOSING_AUCTION = 6; //Аукцион закрытия
  SECURITY_TRADING_STATUS_DARK_POOL_AUCTION = 7; //Аукцион крупных пакетов
  SECURITY_TRADING_STATUS_DISCRETE_AUCTION = 8; //Дискретный аукцион
  SECURITY_TRADING_STATUS_OPENING_AUCTION_PERIOD = 9; //Аукцион открытия
  SECURITY_TRADING_STATUS_TRADING_AT_CLOSING_AUCTION_PRICE = 10; //Период торгов по цене аукциона закрытия
}syntax = "proto3";

package tinkoff.public.invest.api.contract.v1;

option go_package = "Tinkoff/investAPI";
option java_package = "ru.tinkoff.piapi.contract.v1";
option java_multiple_files = true;
option csharp_namespace = "Tinkoff.InvestAPI.V1";
option objc_class_prefix = "TIAPI";
option php_namespace = "Tinkoff\\Invest\\V1";

import "google/protobuf/timestamp.proto";
import "common.proto";


service InstrumentsService {/*Сервис предназначен для получения:</br>**1**. информации об инструментах;</br>**2**.
                            расписания торговых сессий;</br>**3**. календаря выплат купонов по облигациям;</br>**4**.
                            размера гарантийного обеспечения по фьючерсам;</br>**5**. дивидендов по ценной бумаге.*/

  rpc TradingSchedules (TradingSchedulesRequest) returns (TradingSchedulesResponse); // Метод получения расписания торгов торговых площадок.

  rpc BondBy (InstrumentRequest) returns (BondResponse); //Метод получения облигации по её идентификатору.
  rpc Bonds (InstrumentsRequest) returns (BondsResponse); //Метод получения списка облигаций.

  rpc CurrencyBy (InstrumentRequest) returns (CurrencyResponse); //Метод получения валюты по её идентификатору.
  rpc Currencies (InstrumentsRequest) returns (CurrenciesResponse); //Метод получения списка валют.

  rpc EtfBy (InstrumentRequest) returns (EtfResponse); //Метод получения инвестиционного фонда по его идентификатору.
  rpc Etfs (InstrumentsRequest) returns (EtfsResponse); //Метод получения списка инвестиционных фондов.

  rpc FutureBy (InstrumentRequest) returns (FutureResponse); //Метод получения фьючерса по его идентификатору.
  rpc Futures (InstrumentsRequest) returns (FuturesResponse); //Метод получения списка фьючерсов.

  rpc ShareBy (InstrumentRequest) returns (ShareResponse); //Метод получения акции по её идентификатору.
  rpc Shares (InstrumentsRequest) returns (SharesResponse); //Метод получения списка акций.

  rpc GetAccruedInterests (GetAccruedInterestsRequest) returns (GetAccruedInterestsResponse); //Метод получения накопленного купонного дохода по облигации.
  rpc GetFuturesMargin (GetFuturesMarginRequest) returns (GetFuturesMarginResponse); //Метод получения размера гарантийного обеспечения по фьючерсам.

  rpc GetInstrumentBy (InstrumentRequest) returns (InstrumentResponse); //Метод получения основной информации об инструменте.

  rpc GetDividends (GetDividendsRequest) returns (GetDividendsResponse); //Метод для получения событий выплаты дивидендов по инструменту.
}

message TradingSchedulesRequest {
  string exchange = 1; // Наименование биржи или расчетного календаря. </br>Если не передаётся, возвращается информация по всем доступным торговым площадкам.
  google.protobuf.Timestamp from = 2; // Начало периода по часовому поясу UTC.
  google.protobuf.Timestamp to = 3; // Окончание периода по часовому поясу UTC.
}

message TradingSchedulesResponse {
  repeated TradingSchedule exchanges = 1; // Список торговых площадок и режимов торгов.
}

// Данные по торговой площадке.
message TradingSchedule {
  string exchange = 1; // Наименование торговой площадки.
  repeated TradingDay days = 2; // Массив с торговыми и неторговыми днями.
}

// Информация о времени торгов.
message TradingDay {
  google.protobuf.Timestamp date = 1; // Дата.
  bool is_trading_day = 2; // Признак торгового дня на бирже.
  google.protobuf.Timestamp start_time = 3; // Время начала торгов по часовому поясу UTC.
  google.protobuf.Timestamp end_time = 4; // Время окончания торгов по часовому поясу UTC.
  google.protobuf.Timestamp market_order_start_time = 5; // Время начала подачи заявки по часовому поясу UTC.
  google.protobuf.Timestamp market_order_end_time = 6; // Время окончания подачи заявки по часовому поясу UTC.
}

//Запрос получения инструмента по идентификатору.
message InstrumentRequest {
  InstrumentIdType id_type = 1; // Тип идентификатора инструмента. Возможные значения: figi, ticker, isin. Подробнее об идентификации инструментов: [Идентификация инструментов](/investAPI/faq_identification/)
  string class_code = 2; // Идентификатор class_code. Обязателен при id_type = ticker.
  string id = 3; // Идентификатор запрашиваемого инструмента.
}

//Запрос получения инструментов.
message InstrumentsRequest {
  InstrumentStatus instrument_status = 1; //Статус запрашиваемых инструментов. Возможные значения: [InstrumentStatus](#instrumentstatus)
}

//Информация об облигации.
message BondResponse {
  Bond instrument = 1; // Информация об облигации.
}

//Список облигаций.
message BondsResponse {
  repeated Bond instruments = 1; //Массив облигаций.
}

//Данные по валюте.
message CurrencyResponse {
  Currency instrument = 1; // Информация о валюте.
}

//Данные по валютам.
message CurrenciesResponse {
  repeated Currency instruments = 1; //Массив валют.
}

//Данные по фонду.
message EtfResponse {
  Etf instrument = 1; // Информация о фонде.
}

//Данные по фондам.
message EtfsResponse {
  repeated Etf instruments = 1; //Массив фондов.
}

//Данные по фьючерсу.
message FutureResponse {
  Future instrument = 1; // Информация о фьючерсу.
}

//Данные по фьючерсам.
message FuturesResponse {
  repeated Future instruments = 1; //Массив фьючерсов.
}

//Данные по акции.
message ShareResponse {
  Share instrument = 1; // Информация об акции.
}

//Данные по акциям.
message SharesResponse {
  repeated Share instruments = 1; //Массив акций.
}

//Объект передачи информации об облигации.
message Bond {
  string figi = 1; //Figi-идентификатор инструмента.
  string ticker = 2;  //Тикер инструмента.
  string class_code = 3; //Класс-код (секция торгов).
  string isin = 4; //Isin-идентификатор инструмента.
  int32 lot = 5; //Лотность инструмента. Возможно совершение операций только на количества ценной бумаги, кратные параметру *lot*. Подробнее: [лот](/investAPI/glossary#lot)
  string currency = 6; //Валюта расчётов.

  double klong = 7; //Коэффициент ставки риска длинной позиции по инструменту.
  double kshort = 8; //Коэффициент ставки риска короткой позиции по инструменту.
  double dlong = 9; //Ставка риска минимальной маржи в лонг. Подробнее: [ставка риска в лонг](https://help.tinkoff.ru/margin-trade/long/risk-rate/)
  double dshort = 10; //Ставка риска минимальной маржи в шорт. Подробнее: [ставка риска в шорт](https://help.tinkoff.ru/margin-trade/short/risk-rate/)
  double dlong_min = 11; //Ставка риска начальной маржи в лонг. Подробнее: [ставка риска в лонг](https://help.tinkoff.ru/margin-trade/long/risk-rate/)
  double dshort_min = 12; //Ставка риска начальной маржи в шорт. Подробнее: [ставка риска в шорт](https://help.tinkoff.ru/margin-trade/short/risk-rate/)
  bool short_enabled_flag = 13; //Признак доступности для операций в шорт.
  string name = 15; //Название инструмента.
  string exchange = 16; //Торговая площадка.

  int32 coupon_quantity_per_year = 17; //Количество выплат по купонам в год.
  google.protobuf.Timestamp maturity_date = 18; //Дата погашения облигации в часовом поясе UTC.
  MoneyValue nominal = 19; //Номинал облигации.
  google.protobuf.Timestamp state_reg_date = 21; //Дата выпуска облигации в часовом поясе UTC.
  google.protobuf.Timestamp placement_date = 22; //Дата размещения в часовом поясе UTC.
  MoneyValue placement_price = 23; //Цена размещения.
  MoneyValue aci_value = 24; //Значение НКД (накопленного купонного дохода) на дату.

  string country_of_risk = 25; //Код страны эмитента.
  string country_of_risk_name = 26; //Наименование страны эмитента.
  string sector = 27; //Сектор экономики.
  string issue_kind = 28; //Форма выпуска. Возможные значения: </br>**documentary** — документарная; </br>**non_documentary** — бездокументарная.
  int64 issue_size = 29; //Размер выпуска.
  int64 issue_size_plan = 30; //Плановый размер выпуска.

  SecurityTradingStatus trading_status = 31; //Текущий режим торгов инструмента.
  bool otc_flag = 32; //Признак внебиржевой ценной бумаги.
  bool buy_available_flag = 33; //Признак доступности для покупки.
  bool sell_available_flag = 34; //Признак доступности для продажи.
  bool floating_coupon_flag = 35; //Признак облигации с плавающим купоном.
  bool perpetual_flag = 36; //Признак бессрочной облигации.
  bool amortization_flag = 37; //Признак облигации с амортизацией долга.
  float min_price_increment = 38; //Шаг цены.
  bool api_trade_available_flag = 39; //Признак доступности торгов через API.
}

//Объект передачи информации о валюте.
message Currency {
  string figi = 1; //Figi-идентификатор инструмента.
  string ticker = 2;  //Тикер инструмента.
  string class_code = 3; //Класс-код (секция торгов).
  string isin = 4; //Isin-идентификатор инструмента.
  int32 lot = 5; //Лотность инструмента. Возможно совершение операций только на количества ценной бумаги, кратные параметру *lot*. Подробнее: [лот](/investAPI/glossary#lot)
  string currency = 6; //Валюта расчётов.

  double klong = 7; //Коэффициент ставки риска длинной позиции по инструменту.
  double kshort = 8; //Коэффициент ставки риска короткой позиции по инструменту.
  double dlong = 9; //Ставка риска минимальной маржи в лонг. Подробнее: [ставка риска в лонг](https://help.tinkoff.ru/margin-trade/long/risk-rate/)
  double dshort = 10; //Ставка риска минимальной маржи в шорт. Подробнее: [ставка риска в шорт](https://help.tinkoff.ru/margin-trade/short/risk-rate/)
  double dlong_min = 11; //Ставка риска начальной маржи в лонг. Подробнее: [ставка риска в лонг](https://help.tinkoff.ru/margin-trade/long/risk-rate/)
  double dshort_min = 12; //Ставка риска начальной маржи в шорт. Подробнее: [ставка риска в шорт](https://help.tinkoff.ru/margin-trade/short/risk-rate/)
  bool short_enabled_flag = 13; //Признак доступности для операций в шорт.
  string name = 15; //Название инструмента.
  string exchange = 16; //Торговая площадка.

  MoneyValue nominal = 17; //Номинал.

  string country_of_risk = 18; //Код страны эмитента.
  string country_of_risk_name = 19; //Наименование страны эмитента.

  SecurityTradingStatus trading_status = 20; //Текущий режим торгов инструмента.
  bool otc_flag = 21; //Признак внебиржевой ценной бумаги.
  bool buy_available_flag = 22; //Признак доступности для покупки.
  bool sell_available_flag = 23; //Признак доступности для продажи.
  string iso_currency_name = 24; //Строковый ISO-код валюты.
  float min_price_increment = 25; //Шаг цены.
  bool api_trade_available_flag = 26; //Признак доступности торгов через API.
}

//Объект передачи информации об инвестиционном фонде.
message Etf {
  string figi = 1; //Figi-идентификатор инструмента.
  string ticker = 2; //Тикер инструмента.
  string class_code = 3; //Класс-код (секция торгов).
  string isin = 4; //Isin-идентификатор инструмента.
  int32 lot = 5; //Лотность инструмента. Возможно совершение операций только на количества ценной бумаги, кратные параметру *lot*. Подробнее: [лот](/investAPI/glossary#lot)
  string currency = 6; //Валюта расчётов.

  double klong = 7; //Коэффициент ставки риска длинной позиции по инструменту.
  double kshort = 8; //Коэффициент ставки риска короткой позиции по инструменту.
  double dlong = 9; //Ставка риска минимальной маржи в лонг. Подробнее: [ставка риска в лонг](https://help.tinkoff.ru/margin-trade/long/risk-rate/)
  double dshort = 10; //Ставка риска минимальной маржи в шорт. Подробнее: [ставка риска в шорт](https://help.tinkoff.ru/margin-trade/short/risk-rate/)
  double dlong_min = 11; //Ставка риска начальной маржи в лонг. Подробнее: [ставка риска в лонг](https://help.tinkoff.ru/margin-trade/long/risk-rate/)
  double dshort_min = 12; //Ставка риска начальной маржи в шорт. Подробнее: [ставка риска в шорт](https://help.tinkoff.ru/margin-trade/short/risk-rate/)
  bool short_enabled_flag = 13; //Признак доступности для операций в шорт.
  string name = 15; //Название инструмента.
  string exchange = 16; //Торговая площадка.

  double fixed_commission = 17; //Размер фиксированной комиссии фонда.
  string focus_type = 18; //Возможные значения: </br>**equity** — акции;</br>**fixed_income** — облигации;</br>**mixed_allocation** — смешанный;</br>**money_market** — денежный рынок;</br>**real_estate** — недвижимость;</br>**commodity** — товары;</br>**specialty** — специальный;</br>**private_equity** — private equity;</br>**alternative_investment** — альтернативные инвестиции.
  google.protobuf.Timestamp released_date = 19; //Дата выпуска в часовом поясе UTC.
  double num_shares = 20; //Количество акций фонда в обращении.

  string country_of_risk = 21; //Код страны эмитента.
  string country_of_risk_name = 22; //Наименование страны эмитента.
  string sector = 23; //Сектор экономики.
  string rebalancing_freq = 24; //Частота ребалансировки.

  SecurityTradingStatus trading_status = 25; //Текущий режим торгов инструмента.
  bool otc_flag = 26; //Признак внебиржевой ценной бумаги.
  bool buy_available_flag = 27; //Признак доступности для покупки.
  bool sell_available_flag = 28; //Признак доступности для продажи.
  float min_price_increment = 29; //Шаг цены.
  bool api_trade_available_flag = 30; //Признак доступности торгов через API.
}

//Объект передачи информации о фьючерсе.
message Future {
  string figi = 1; //Figi-идентификатор инструмента.
  string ticker = 2;  //Тикер инструмента.
  string class_code = 3; //Класс-код (секция торгов).
  int32 lot = 4; //Лотность инструмента. Возможно совершение операций только на количества ценной бумаги, кратные параметру *lot*. Подробнее: [лот](/investAPI/glossary#lot)
  string currency = 5; //Валюта расчётов.

  double klong = 6; //Коэффициент ставки риска длинной позиции по клиенту.
  double kshort = 7; //Коэффициент ставки риска короткой позиции по клиенту.
  double dlong = 8; //Ставка риска минимальной маржи в лонг. Подробнее: [ставка риска в лонг](https://help.tinkoff.ru/margin-trade/long/risk-rate/)
  double dshort = 9; //Ставка риска минимальной маржи в шорт. Подробнее: [ставка риска в шорт](https://help.tinkoff.ru/margin-trade/short/risk-rate/)
  double dlong_min = 10; //Ставка риска начальной маржи в лонг. Подробнее: [ставка риска в лонг](https://help.tinkoff.ru/margin-trade/long/risk-rate/)
  double dshort_min = 11; //Ставка риска начальной маржи в шорт. Подробнее: [ставка риска в шорт](https://help.tinkoff.ru/margin-trade/short/risk-rate/)
  bool short_enabled_flag = 12; //Признак доступности для операций шорт.
  string name = 13; //Название инструмента.
  string exchange = 14; //Торговая площадка.

  google.protobuf.Timestamp first_trade_date = 15; //Дата начала обращения контракта в часовом поясе UTC.
  google.protobuf.Timestamp last_trade_date = 16; //Дата в часовом поясе UTC, до которой возможно проведение операций с фьючерсом.
  string futures_type = 17; //Тип фьючерса. Возможные значения: </br>**physical_delivery** — физические поставки; </br>**cash_settlement** — денежный эквивалент.
  string asset_type = 18; //Тип актива. Возможные значения: </br>**commodity** — товар; </br>**currency** — валюта; </br>**security** — ценная бумага; </br>**index** — индекс.
  string basic_asset = 19;  //Основной актив.
  double basic_asset_size = 20;  //Размер основного актива.

  string country_of_risk = 21; //Код страны эмитента.
  string country_of_risk_name = 22; //Наименование страны эмитента.
  string sector = 23; //Сектор экономики.
  google.protobuf.Timestamp expiration_date = 24; //Дата истечения срока.

  SecurityTradingStatus trading_status = 25; //Текущий режим торгов инструмента.
  bool otc_flag = 26; //Признак внебиржевой ценной бумаги.
  bool buy_available_flag = 27; //Признак доступности для покупки.
  bool sell_available_flag = 28; //Признак доступности для продажи.
  float min_price_increment = 29; //Шаг цены.
  bool api_trade_available_flag = 30; //Признак доступности торгов через API.
}

//Объект передачи информации об акции.
message Share {
  string figi = 1; //Figi-идентификатор инструмента.
  string ticker = 2;  //Тикер инструмента.
  string class_code = 3; //Класс-код (секция торгов).
  string isin = 4; //Isin-идентификатор инструмента.
  int32 lot = 5; //Лотность инструмента. Возможно совершение операций только на количества ценной бумаги, кратные параметру *lot*. Подробнее: [лот](/investAPI/glossary#lot)
  string currency = 6; //Валюта расчётов.

  double klong = 7; //Коэффициент ставки риска длинной позиции по инструменту.
  double kshort = 8; //Коэффициент ставки риска короткой позиции по инструменту.
  double dlong = 9; //Ставка риска минимальной маржи в лонг. Подробнее: [ставка риска в лонг](https://help.tinkoff.ru/margin-trade/long/risk-rate/)
  double dshort = 10; //Ставка риска минимальной маржи в шорт. Подробнее: [ставка риска в шорт](https://help.tinkoff.ru/margin-trade/short/risk-rate/)
  double dlong_min = 11; //Ставка риска начальной маржи в лонг. Подробнее: [ставка риска в лонг](https://help.tinkoff.ru/margin-trade/long/risk-rate/)
  double dshort_min = 12; //Ставка риска начальной маржи в шорт. Подробнее: [ставка риска в шорт](https://help.tinkoff.ru/margin-trade/short/risk-rate/)
  bool short_enabled_flag = 13; //Признак доступности для операций в шорт.
  string name = 15; //Название инструмента.
  string exchange = 16; //Торговая площадка.

  google.protobuf.Timestamp  ipo_date = 17; //Дата IPO акции в часовом поясе UTC.
  int64 issue_size = 18; //Размер выпуска.

  string country_of_risk = 19; //Код страны эмитента.
  string country_of_risk_name = 20; //Наименование страны эмитента.
  string sector = 21; //Сектор экономики.
  int64 issue_size_plan = 22; //Плановый размер выпуска.
  MoneyValue nominal = 23; //Номинал.

  SecurityTradingStatus trading_status = 25; //Текущий режим торгов инструмента.
  bool otc_flag = 26; //Признак внебиржевой ценной бумаги.
  bool buy_available_flag = 27; //Признак доступности для покупки.
  bool sell_available_flag = 28; //Признак доступности для продажи.
  bool div_yield_flag = 29; //Признак наличия дивидендной доходности.
  ShareType share_type = 30; //Тип акции. Возможные значения: [ShareType](/investAPI/instruments#sharetype)
  float min_price_increment = 31; //Шаг цены.
  bool api_trade_available_flag = 32; //Признак доступности торгов через API.
}

message GetAccruedInterestsRequest {
  string figi = 1; //Figi-идентификатор инструмента.
  google.protobuf.Timestamp from = 2; //Начало запрашиваемого периода в часовом поясе UTC.
  google.protobuf.Timestamp to = 3; //Окончание запрашиваемого периода в часовом поясе UTC.
}

message GetAccruedInterestsResponse {
  repeated AccruedInterest accrued_interests = 1; //Массив операций начисления купонов.
}

//Операция начисления купонов.
message AccruedInterest {
  google.protobuf.Timestamp date = 1; //Дата и время выплаты в часовом поясе UTC.
  Quotation value = 2; //Величина выплаты.
  float value_percent = 3; //Величина выплаты в процентах от номинала.
  Quotation nominal = 4; //Номинал облигации.
}

message GetFuturesMarginRequest {
  string figi = 1; // Идентификатор инструмента.
}

message GetFuturesMarginResponse {
  MoneyValue initial_margin_on_buy = 1; // Гарантийное обеспечение при покупке.
  MoneyValue initial_margin_on_sell = 2; // Гарантийное обеспечение при продаже.
}

//Тип идентификатора инструмента. Подробнее об идентификации инструментов: [Идентификация инструментов](/investAPI/faq_identification/)
enum InstrumentIdType {
  INSTRUMENT_ID_UNSPECIFIED = 0; //Значение не определено.
  INSTRUMENT_ID_TYPE_FIGI = 1; //Figi.
  INSTRUMENT_ID_TYPE_TICKER = 2; //Ticker.
}

//Статус запрашиваемых инструментов.
enum InstrumentStatus {
  INSTRUMENT_STATUS_UNSPECIFIED = 0; //Значение не определено.
  INSTRUMENT_STATUS_BASE = 1; //Базовый список инструментов (по умолчанию).
  INSTRUMENT_STATUS_ALL = 2; //Список всех инструментов.
}

//Данные по инструменту.
message InstrumentResponse {
  Instrument instrument = 1; // Основная информация об инструменте.
}

//Объект передачи основной информации об инструменте.
message Instrument {
  string figi = 1; //Figi-идентификатор инструмента.
  string ticker = 2;  //Тикер инструмента.
  string class_code = 3; //Класс-код инструмента.
  string isin = 4; //Isin-идентификатор инструмента.
  int32 lot = 5; //Лотность инструмента. Возможно совершение операций только на количества ценной бумаги, кратные параметру *lot*. Подробнее: [лот](/investAPI/glossary#lot)
  string currency = 6; //Валюта расчётов.

  double klong = 7; //Коэффициент ставки риска длинной позиции по инструменту.
  double kshort = 8; //Коэффициент ставки риска короткой позиции по инструменту.
  double dlong = 9; //Ставка риска минимальной маржи в лонг. Подробнее: [ставка риска в лонг](https://help.tinkoff.ru/margin-trade/long/risk-rate/)
  double dshort = 10; //Ставка риска минимальной маржи в шорт. Подробнее: [ставка риска в шорт](https://help.tinkoff.ru/margin-trade/short/risk-rate/)
  double dlong_min = 11; //Ставка риска начальной маржи в лонг. Подробнее: [ставка риска в лонг](https://help.tinkoff.ru/margin-trade/long/risk-rate/)
  double dshort_min = 12; //Ставка риска начальной маржи в шорт. Подробнее: [ставка риска в шорт](https://help.tinkoff.ru/margin-trade/short/risk-rate/)
  bool short_enabled_flag = 13; //Признак доступности для операций в шорт.
  string name = 14; //Название инструмента.
  string exchange = 15; //Торговая площадка.

  string country_of_risk = 16; //Код страны эмитента.
  string country_of_risk_name = 17; //Наименование страны эмитента.
  string instrument_type = 18; //Тип инструмента.

  SecurityTradingStatus trading_status = 19; //Текущий режим торгов инструмента.
  bool otc_flag = 20; //Признак внебиржевой ценной бумаги.
  bool buy_available_flag = 21; //Признак доступности для покупки.
  bool sell_available_flag = 22; //Признак доступности для продажи.
  float min_price_increment = 23; //Шаг цены.
  bool api_trade_available_flag = 24; //Признак доступности торгов через API.
}

message GetDividendsRequest {
  string figi = 1; //Figi-идентификатор инструмента.
  google.protobuf.Timestamp from = 2; //Начало запрашиваемого периода в часовом поясе UTC.
  google.protobuf.Timestamp to = 3; //Окончание запрашиваемого периода в часовом поясе UTC.
}

message GetDividendsResponse {
  repeated Dividend dividends = 1;
}

message Dividend {
  MoneyValue dividend_net = 1; //Величина дивиденда на 1 ценную бумагу (включая валюту).
  google.protobuf.Timestamp payment_date = 2; //Дата фактических выплат.
  google.protobuf.Timestamp declared_date = 3; //Дата объявления дивидендов.
  google.protobuf.Timestamp last_buy_date = 4; //Последний день (включительно) покупки для получения выплаты.
  string dividend_type = 5; //Тип выплаты. Возможные значения: Regular Cash – регулярные выплаты, Cancelled – выплата отменена, Daily Accrual – ежедневное начисление, Return of Capital – возврат капитала, прочие типы выплат.
  google.protobuf.Timestamp record_date = 6;  //Дата фиксации реестра
  string regularity = 7; //Регулярность выплаты. Возможные значения: Annual – ежегодная, Semi-Anl – каждые полгода, прочие типы выплат.
  MoneyValue close_price = 8; //Цена закрытия инструмента на момент ex_dividend_date.
  Quotation yield_value = 9; //Величина доходности.
  google.protobuf.Timestamp created_at = 10; //Дата и время создания записи.
}

enum ShareType {
  SHARE_TYPE_UNSPECIFIED = 0; //Значение не определено.
  SHARE_TYPE_COMMON = 1; //Обыкновенная
  SHARE_TYPE_PREFERRED = 2; //Привилегированная
  SHARE_TYPE_ADR = 3; //Американские депозитарные расписки
  SHARE_TYPE_GDR = 4; //Глобальные депозитарные расписки
  SHARE_TYPE_MLP = 5; //Товарищество с ограниченной ответственностью
  SHARE_TYPE_NY_REG_SHRS = 6; //Акции из реестра Нью-Йорка
  SHARE_TYPE_CLOSED_END_FUND = 7; //Закрытый инвестиционный фонд
  SHARE_TYPE_REIT = 8; //Траст недвижимости
}syntax = "proto3";

package tinkoff.public.invest.api.contract.v1;

option go_package = "Tinkoff/investAPI";
option java_package = "ru.tinkoff.piapi.contract.v1";
option java_multiple_files = true;
option csharp_namespace = "Tinkoff.InvestAPI.V1";
option objc_class_prefix = "TIAPI";
option php_namespace = "Tinkoff\\Invest\\V1";

import "google/protobuf/timestamp.proto";
import "common.proto";

service MarketDataService { //Сервис получения биржевой информации:</br> **1**. свечи;</br> **2**. стаканы;</br> **3**. торговые статусы;</br> **4**. лента сделок.
  rpc GetCandles(GetCandlesRequest) returns (GetCandlesResponse); //Метод запроса исторических свечей по инструменту.
  rpc GetLastPrices(GetLastPricesRequest) returns (GetLastPricesResponse); //Метод запроса последних цен по инструментам.
  rpc GetOrderBook(GetOrderBookRequest) returns (GetOrderBookResponse); //Метод получения стакана по инструменту.
  rpc GetTradingStatus(GetTradingStatusRequest) returns (GetTradingStatusResponse); //Метод запроса статуса торгов по инструментам.
}

service MarketDataStreamService {
  rpc MarketDataStream(stream MarketDataRequest) returns (stream MarketDataResponse); //Двусторонний стрим предоставления биржевой информации.
}

//Запрос подписки или отписки на определённые биржевые данные.
message MarketDataRequest {
  oneof payload {
    SubscribeCandlesRequest subscribe_candles_request = 1; //Запрос подписки на свечи.
    SubscribeOrderBookRequest subscribe_order_book_request = 2; //Запрос подписки на стаканы.
    SubscribeTradesRequest subscribe_trades_request = 3; //Запрос подписки на ленту обезличенных сделок.
    SubscribeInfoRequest subscribe_info_request = 4; //Запрос подписки на торговые статусы инструментов.
  }
}

//Пакет биржевой информации по подписке.
message MarketDataResponse {
  oneof payload {
    SubscribeCandlesResponse subscribe_candles_response = 1; //Результат подписки на свечи.
    SubscribeOrderBookResponse subscribe_order_book_response = 2; //Результат подписки на стаканы.
    SubscribeTradesResponse subscribe_trades_response = 3; //Результат подписки на поток обезличенных сделок.
    SubscribeInfoResponse subscribe_info_response = 4; //Результат подписки на торговые статусы инструментов.
    Candle candle = 5; //Свеча.
    Trade trade = 6; //Сделки.
    OrderBook orderbook = 7; //Стакан.
    TradingStatus trading_status = 8; //Торговый статус.
  }
}

// subscribeCandles | Изменения статуса подписки на свечи.
message SubscribeCandlesRequest {
  SubscriptionAction subscription_action = 1; //Изменение статуса подписки.
  repeated CandleInstrument instruments = 2; //Массив инструментов для подписки на свечи.
}

enum SubscriptionAction {
  SUBSCRIPTION_ACTION_UNSPECIFIED = 0; //Статус подписки не определён.
  SUBSCRIPTION_ACTION_SUBSCRIBE = 1; //Подписаться.
  SUBSCRIPTION_ACTION_UNSUBSCRIBE = 2; //Отписаться.
}

enum SubscriptionInterval {
  SUBSCRIPTION_INTERVAL_UNSPECIFIED = 0; //Интервал свечи не определён.
  SUBSCRIPTION_INTERVAL_ONE_MINUTE = 1; //Минутные свечи.
  SUBSCRIPTION_INTERVAL_FIVE_MINUTES = 2; //Пятиминутные свечи.
}

message CandleInstrument {
  string figi = 1; //Figi-идентификатор инструмента.
  SubscriptionInterval interval = 2; //Интервал свечей.
}

message SubscribeCandlesResponse {
  string tracking_id = 1; //Уникальный идентификатор запроса, подробнее: [tracking_id](/investAPI/grpc#tracking-id)
  repeated CandleSubscription candles_subscriptions = 2; //Массив статусов подписки на свечи.
}

message CandleSubscription {
  string figi = 1; //Figi-идентификатор инструмента.
  SubscriptionInterval interval = 2; //Интервал свечей.
  SubscriptionStatus subscription_status = 3; //Статус подписки.
}

enum SubscriptionStatus {
  SUBSCRIPTION_STATUS_UNSPECIFIED = 0; //Статус подписки не определён.
  SUBSCRIPTION_STATUS_SUCCESS = 1; //Успешно.
  SUBSCRIPTION_STATUS_INSTRUMENT_NOT_FOUND = 2; //Инструмент не найден.
  SUBSCRIPTION_STATUS_SUBSCRIPTION_ACTION_IS_INVALID = 3; //Некорректный статус подписки, список возможных значений: [SubscriptionAction](/investAPI/marketdata#subscriptionaction)
  SUBSCRIPTION_STATUS_DEPTH_IS_INVALID = 4; //Некорректная глубина стакана, требуется указать целое число от 1 до 50.
  SUBSCRIPTION_STATUS_INTERVAL_IS_INVALID = 5; //Некорректный интервал свечей, список возможных значений: [SubscriptionInterval](/investAPI/marketdata#subscriptioninterval)
  SUBSCRIPTION_STATUS_LIMIT_IS_EXCEEDED = 6; //Превышен лимит подписок в рамках стрима, подробнее: [Лимитная политика](/investAPI/limits/)
  SUBSCRIPTION_STATUS_INTERNAL_ERROR = 7; //Внутренняя ошибка сервиса.
}

// subscribeOrderbook | Изменение статуса подписки на стаканы.
message SubscribeOrderBookRequest {
  SubscriptionAction subscription_action = 1; //Изменение статуса подписки.
  repeated OrderBookInstrument instruments = 2; //Массив инструментов для подписки на стаканы.
}

message OrderBookInstrument {
  string figi = 1; //Figi-идентификатор инструмента.
  int32 depth = 2; //Глубина стакана.
}

message SubscribeOrderBookResponse {
  string tracking_id = 1; //Уникальный идентификатор запроса, подробнее: [tracking_id](/investAPI/grpc#tracking-id)
  repeated OrderBookSubscription order_book_subscriptions = 2; //Массив статусов подписки на стаканы.
}

message OrderBookSubscription {
  string figi = 1; //Figi-идентификатор инструмента.
  int32 depth = 2; //Глубина стакана.
  SubscriptionStatus subscription_status = 3; //Статус подписки.
}

// subscribeTrades | Изменение статуса подписки на поток обезличенных сделок.
message SubscribeTradesRequest {
  SubscriptionAction subscription_action = 1; //Изменение статуса подписки.
  repeated TradeInstrument instruments = 2; //Массив инструментов для подписки на поток обезличенных сделок.
}

message TradeInstrument {
  string figi = 1; //Figi-идентификатор инструмента.
}

message SubscribeTradesResponse {
  string tracking_id = 1; //Уникальный идентификатор запроса, подробнее: [tracking_id](/investAPI/grpc#tracking-id)
  repeated TradeSubscription trade_subscriptions = 2; //Массив статусов подписки на поток сделок.
}

message TradeSubscription {
  string figi = 1; //Figi-идентификатор инструмента.
  SubscriptionStatus subscription_status = 2; //Статус подписки.
}

// subscribeInfo | Изменение статуса подписки на торговый статус инструмента.
message SubscribeInfoRequest {
  SubscriptionAction subscription_action = 1; //Изменение статуса подписки.
  repeated InfoInstrument instruments = 2; //Массив инструментов для подписки на торговый статус.
}

message InfoInstrument {
  string figi = 1; //Figi-идентификатор инструмента.
}

message SubscribeInfoResponse {
  string tracking_id = 1; //Уникальный идентификатор запроса, подробнее: [tracking_id](/investAPI/grpc#tracking-id)
  repeated InfoSubscription info_subscriptions = 2; //Массив статусов подписки на торговый статус.
}

message InfoSubscription {
  string figi = 1; //Figi-идентификатор инструмента.
  SubscriptionStatus subscription_status = 2; //Статус подписки.
}

// Выходные параметры. Пакет Candles.
message Candle {
  string figi = 1; //Figi-идентификатор инструмента.
  SubscriptionInterval interval = 2; //Интервал свечи.
  Quotation open = 3; //Цена открытия за 1 лот.
  Quotation high = 4; //Максимальная цена за 1 лот.
  Quotation low = 5; //Минимальная цена за 1 лот.
  Quotation close = 6; //Цена закрытия за 1 лот.
  int64 value = 7; //Объём сделок в лотах.
  google.protobuf.Timestamp time = 8; //Время свечи в часовом поясе UTC.
}

message OrderBook {
  string figi = 1; //Figi-идентификатор инструмента.
  int32 depth = 2; //Глубина стакана.
  bool is_consistent = 3; //Флаг консистентности стакана. **false** значит не все заявки попали в стакан по причинам сетевых задержек или нарушения порядка доставки.
  repeated Order bids = 4; //Массив предложений.
  repeated Order asks = 5; //Массив спроса.
  google.protobuf.Timestamp time = 6; //Время стакана в часовом поясе UTC.
}

message Order {
  Quotation price = 1; //Цена за 1 лот.
  int64 quantity = 2; //Количество в лотах.
}

message Trade {
  string figi = 1; //Figi-идентификатор инструмента.
  TradeDirection direction = 2; //Направление сделки.
  Quotation price = 3; //Цена за 1 лот.
  int64 quantity = 4; //Количество лотов.
  google.protobuf.Timestamp timestamp = 5; //Время сделки в часовом поясе UTC по времени биржи.
}

enum TradeDirection {
  TRADE_DIRECTION_UNSPECIFIED = 0; //Направление сделки не определено.
  TRADE_DIRECTION_BUY = 1; //Покупка.
  TRADE_DIRECTION_SELL = 2; //Продажа.
}

message TradingStatus {
  string figi = 1; //Figi-идентификатор инструмента.
  SecurityTradingStatus trading_status = 2; //Статус торговли инструментом.
}

message GetCandlesRequest {
  string figi = 1; //Figi-идентификатор инструмента
  google.protobuf.Timestamp from = 2; //Начало запрашиваемого периода в часовом поясе UTC.
  google.protobuf.Timestamp to = 3; //Окончание запрашиваемого периода в часовом поясе UTC.
  CandleInterval interval = 4; //Интервал запрошенных свечей.
}

enum CandleInterval {
  CANDLE_INTERVAL_UNSPECIFIED = 0; //Интервал не определён.
  CANDLE_INTERVAL_1_MIN = 1; //1 минута.
  CANDLE_INTERVAL_5_MIN = 2; //5 минут.
  CANDLE_INTERVAL_15_MIN = 3; //15 минут.
  CANDLE_INTERVAL_HOUR = 4; //1 час.
  CANDLE_INTERVAL_DAY = 5; //1 день.
}

message GetCandlesResponse {
  repeated HistoricCandle candles = 1; //Массив свечей.
}

message HistoricCandle {
  Quotation open = 1; //Цена открытия за 1 лот.
  Quotation high = 2; //Максимальная цена за 1 лот.
  Quotation low = 3; //Минимальная цена за 1 лот.
  Quotation close = 4; //Цена закрытия за 1 лот.
  int64 volume = 5; //Объём торгов в лотах.
  google.protobuf.Timestamp time = 6; //Время свечи в часовом поясе UTC.
  bool is_complete = 7; //Признак завершённости свечи. **false** значит, свеча за текущие интервал ещё сформирована не полностью.
}

message GetLastPricesRequest {
  repeated string figi = 1; //Массив figi-идентификаторов инструментов.
}

message GetLastPricesResponse {
  repeated LastPrice last_prices = 1; //Массив последних цен.
}

message LastPrice {
  string figi = 1; //Идентификатор инструмента.
  Quotation price = 2; //Последняя цена за 1 лот.
  google.protobuf.Timestamp time = 3; //Время получения последней цены в часовом поясе UTC по времени биржи.
}

message GetOrderBookRequest {
  string figi = 1; //Figi-идентификатор инструмента.
  int32 depth = 2; //Глубина стакана.
}

message GetOrderBookResponse {
  string figi = 1; //Figi-идентификатор инструмента.
  int32 depth = 2; //Глубина стакана.
  repeated Order bids = 3; //Множество пар значений на покупку.
  repeated Order asks = 4; //Множество пар значений на продажу.
  Quotation last_price = 5; //Цена последней сделки.
  Quotation close_price = 6; //Цена закрытия.
}

message GetTradingStatusRequest {
  string figi = 1; //Идентификатор инструмента.
}

message GetTradingStatusResponse {
  string figi = 1; //Figi-идентификатор инструмента.
  SecurityTradingStatus trading_status = 2; //Статус торговли инструментом.
}syntax = "proto3";

package tinkoff.public.invest.api.contract.v1;

option go_package = "Tinkoff/investAPI";
option java_package = "ru.tinkoff.piapi.contract.v1";
option java_multiple_files = true;
option csharp_namespace = "Tinkoff.InvestAPI.V1";
option objc_class_prefix = "TIAPI";
option php_namespace = "Tinkoff\\Invest\\V1";

import "google/protobuf/timestamp.proto";
import "common.proto";

service OperationsService {/*Сервис предназначен для получения:</br> **1**.  списка операций по счёту;</br> **2**.
                              портфеля по счёту;</br> **3**. позиций ценных бумаг на счёте;</br> **4**.
                              доступного остатка для вывода средств.*/
  //Метод получения списка операций по счёту
  rpc GetOperations(OperationsRequest) returns (OperationsResponse);

  //Метод получения портфеля по счёту
  rpc GetPortfolio(PortfolioRequest) returns (PortfolioResponse);

  //Метод получения списка позиций по счёту
  rpc GetPositions(PositionsRequest) returns (PositionsResponse);

  //Метод получения доступного остатка для вывода средств
  rpc GetWithdrawLimits(WithdrawLimitsRequest) returns (WithdrawLimitsResponse);
}

message OperationsRequest {
  string account_id = 1; //Идентификатор счёта клиента
  google.protobuf.Timestamp from = 2; //Начало периода (по UTC)
  google.protobuf.Timestamp to = 3; //Окончание периода (по UTC)
  OperationState state = 4; //Статус запрашиваемых операций
  string figi = 5; //Figi-идентификатор инструмента для фильтрации
}

message OperationsResponse {
  repeated Operation operations = 1; //Массив операций
}

message Operation {//Данные по операции
  string id = 1; //Идентификатор операции
  string parent_operation_id = 2; //Идентификатор родительской операции
  string currency = 3; //Валюта операции
  MoneyValue payment = 4; //Сумма операции
  MoneyValue price = 5; //Цена операции
  OperationState state = 6; //Статус операции
  int64 quantity = 7; //Количество лотов инструмента
  int64 quantity_rest = 8; //Неисполненный остаток по сделке
  string figi = 9; //Figi-идентификатор инструмента, связанного с операцией
  string instrument_type = 10;  //Тип инструмента. Возможные значения: </br>**bond** — облигация; </br>**share** — акция; </br>**currency** — валюта; </br>**etf** — фонд; </br>**futures** — фьючерс.
  google.protobuf.Timestamp date = 11; //Дата и время операции в формате часовом поясе UTC
  string type = 12; //Тип операции
}

message PortfolioRequest {
  string account_id = 1; //Идентификатор счёта пользователя
}

message PortfolioResponse {
  MoneyValue total_amount_shares = 1; //Общая стоимость акций в портфеле в рублях
  MoneyValue total_amount_bonds = 2; //Общая стоимость облигаций в портфеле в рублях
  MoneyValue total_amount_etf = 3; //Общая стоимость фондов в портфеле в рублях
  MoneyValue total_amount_currencies = 4; //Общая стоимость валют в портфеле в рублях
  MoneyValue total_amount_futures = 5; //Общая стоимость валют в портфеле в рублях
  float expected_yield = 6; //Текущая доходность портфеля
  repeated PortfolioPosition positions = 7; //Список позиций портфеля
}

message PositionsRequest {
  string account_id = 1; //Идентификатор счёта пользователя
}

message PositionsResponse {
  repeated MoneyValue money = 1;  //Массив валютных позиций портфеля
  repeated MoneyValue blocked = 2;  //Массив заблокированных валютных позиций портфеля
  repeated PositionsSecurities securities = 3;  //Список ценно-бумажных позиций портфеля
  bool limits_loading_in_progress = 4;  //Признак идущей в данный момент выгрузки лимитов
}

message WithdrawLimitsRequest {
  string account_id = 1; //Идентификатор счёта пользователя
}

message WithdrawLimitsResponse {
  repeated MoneyValue money = 1;  //Массив валютных позиций портфеля
  repeated MoneyValue blocked = 2;  //Массив заблокированных валютных позиций портфеля
}

message PortfolioPosition {
  string figi = 1; //Figi-идентификатора инструмента
  string instrument_type = 2; //Тип инструмента
  float quantity = 3; //Количество лотов в портфеле
  MoneyValue average_position_price = 4; //Средняя цена лота в позиции
  float expected_yield = 5; //Текущая рассчитанная доходность
  MoneyValue current_nkd = 6; // Текущий НКД
  Quotation average_position_price_pt = 7; //Средняя цена лота в позиции в пунктах (для фьючерсов)
}

message PositionsSecurities {
  string figi = 1; //Figi-идентификатор бумаги
  int64 blocked = 2; //Заблокировано
  int64 balance = 3;  //Текущий баланс
}

enum OperationState {//Статус запрашиваемых операций
  OPERATION_STATE_UNSPECIFIED = 0; //Статус операции не определён
  OPERATION_STATE_EXECUTED = 1; //Исполнена
  OPERATION_STATE_CANCELED = 2; //Отменена
}syntax = "proto3";

package tinkoff.public.invest.api.contract.v1;

option go_package = "Tinkoff/investAPI";
option java_package = "ru.tinkoff.piapi.contract.v1";
option java_multiple_files = true;
option csharp_namespace = "Tinkoff.InvestAPI.V1";
option objc_class_prefix = "TIAPI";
option php_namespace = "Tinkoff\\Invest\\V1";

import "common.proto";
import "google/protobuf/timestamp.proto";

service OrdersStreamService {
  //Bidirectional stream работы со сделками
  rpc TradesStream(TradesStreamRequest) returns (stream TradesStreamResponse);
}

service OrdersService {/* Сервис предназначен для работы с торговыми поручениями:</br> **1**.
                        выставление;</br> **2**. отмена;</br> **3**. получение статуса;</br> **4**.
                        расчёт полной стоимости;</br> **5**. получение списка заявок.*/
  //Метод выставления заявки.
  rpc PostOrder(PostOrderRequest) returns (PostOrderResponse);

  //Метод отмены биржевой заявки.
  rpc CancelOrder(CancelOrderRequest) returns (CancelOrderResponse);

  //Метод получения статуса торгового поручения.
  rpc GetOrderState(GetOrderStateRequest) returns (OrderState);

  //Метод получения списка активных заявок по счёту.
  rpc GetOrders(GetOrdersRequest) returns (GetOrdersResponse);
}

message TradesStreamRequest {

}

message TradesStreamResponse {
  string order_id = 1; //Идентификатор торгового поручения
  google.protobuf.Timestamp created_at = 2; //Дата и время создания сообщения
  OrderDirection direction = 3; //Направление сделки (возможные значения)
  string figi = 4; //Figi-идентификатор инструмента
  repeated OrderTrade trades = 5; //Массив сделок
}

message OrderTrade {
  google.protobuf.Timestamp date_time = 1;  //Дата и время совершения сделки по времени биржи
  Quotation price = 2;  //Цена, по которой совершена сделка
  int64 quantity = 3;  //Количество лотов в сделке
}

message PostOrderRequest {
  string figi = 1; //Figi-идентификатор инструмента.
  int64 quantity = 2; //Количество лотов.
  Quotation price = 3; //Цена лота.
  OrderDirection direction = 4; //Направление операции.
  string account_id = 5; //Номер счёта.
  OrderType order_type = 6; //Тип заявки.
  string order_id = 7; //Идентификатор запроса выставления поручения для целей идемпотентности. Максимальная длина 36 символов.
}

message PostOrderResponse {
  string order_id = 1; //Идентификатор заявки.
  OrderExecutionReportStatus execution_report_status = 2; //Текущий статус заявки.
  int64 lots_requested = 3; //Запрошено лотов.
  int64 lots_executed = 4; //Исполнено лотов.

  MoneyValue initial_order_price = 5; //Начальная цена заявки. Произведение количества запрошенных лотов на цену.
  MoneyValue executed_order_price = 6; //Исполненная цена заявки. Произведение средней цены покупки на количество лотов.
  MoneyValue total_order_amount = 7; //Итоговая стоимость заявки, включающая все комиссии.
  MoneyValue initial_commission = 8; //Начальная комиссия. Комиссия рассчитанная при выставлении заявки.
  MoneyValue executed_commission = 9; //Фактическая комиссия по итогам исполнения заявки.
  MoneyValue aci_value = 10; //Значение НКД (накопленного купонного дохода) на дату. Подробнее: [НКД при выставлении торговых поручений](/investAPI/head-orders#coupon)

  string figi = 11; // Figi-идентификатор инструмента.
  OrderDirection direction = 12; //Направление сделки.
  MoneyValue initial_security_price = 13;  //Начальная цена инструмента заявки.
  OrderType order_type = 14; //Тип заявки.
  string message = 15; //Дополнительные данные об исполнении заявки.
  Quotation initial_order_price_pt = 16; //Начальная цена заявки в пунктах (для фьючерсов).
}

message CancelOrderRequest {
  string account_id = 1; //Номер счёта.
  string order_id = 2; //Идентификатор заявки.
}

message CancelOrderResponse {
  google.protobuf.Timestamp time = 1; //Дата и время отмены заявки в часовом поясе UTC.
}

message GetOrderStateRequest {
  string account_id = 1; //Номер счёта.
  string order_id = 2; //Идентификатор заявки.
}

message GetOrdersRequest {
  string account_id = 1; //Номер счёта.
}

message GetOrdersResponse {
  repeated OrderState orders = 1; //Массив активных заявок.
}

message OrderState {
  string order_id = 1; //Идентификатор заявки.
  OrderExecutionReportStatus execution_report_status = 2; //Текущий статус заявки.
  int64 lots_requested = 3; //Запрошено лотов.
  int64 lots_executed = 4; //Исполнено лотов.
  MoneyValue initial_order_price = 5; //Начальная цена заявки. Произведение количества запрошенных лотов на цену.
  MoneyValue executed_order_price = 6; //Исполненная цена заявки. Произведение средней цены покупки на количество лотов.
  MoneyValue total_order_amount = 7; //Итоговая стоимость заявки, включающая все комиссии.
  MoneyValue average_position_price = 8; //Средняя цена позиции по сделке.
  MoneyValue initial_commission = 9; //Начальная комиссия. Комиссия, рассчитанная на момент подачи заявки.
  MoneyValue executed_commission = 10; //Фактическая комиссия по итогам исполнения заявки.
  string figi = 11; //Figi-идентификатор инструмента.
  OrderDirection direction = 12; //Направление заявки.
  MoneyValue initial_security_price = 13; //Начальная цена инструмента. Цена инструмента на момент выставления заявки.
  repeated OrderStage stages = 14; //Стадии выполнения заявки.
  MoneyValue service_commission = 15; //Сервисная комиссия.
  string currency = 16; //Валюта заявки.
  OrderType order_type = 17; //Тип заявки.
  google.protobuf.Timestamp order_date = 18; //Дата и время выставления заявки в часовом поясе UTC.
}

message OrderStage {
  MoneyValue price = 1; //Цена.
  int64 quantity = 2; //Количество лотов.
  string trade_id = 3; //Идентификатор торговой операции.
}

enum OrderDirection {//Направление операции
  ORDER_DIRECTION_UNSPECIFIED = 0; //Значение не указано
  ORDER_DIRECTION_BUY = 1; //Покупка
  ORDER_DIRECTION_SELL = 2; //Продажа
}

enum OrderType {//Тип заявки
  ORDER_TYPE_UNSPECIFIED = 0; //Значение не указано
  ORDER_TYPE_LIMIT = 1; //Лимитная
  ORDER_TYPE_MARKET = 2; //Рыночная
}

enum OrderExecutionReportStatus {//Текущий статус заявки (поручения)
  EXECUTION_REPORT_STATUS_UNSPECIFIED = 0;
  EXECUTION_REPORT_STATUS_FILL = 1; //Исполнена
  EXECUTION_REPORT_STATUS_REJECTED = 2; //Отклонена
  EXECUTION_REPORT_STATUS_CANCELLED = 3; //Отменена пользователем
  EXECUTION_REPORT_STATUS_NEW = 4; //Новая
  EXECUTION_REPORT_STATUS_PARTIALLYFILL = 5; //Частично исполнена
}syntax = "proto3";

package tinkoff.public.invest.api.contract.v1;

option go_package = "Tinkoff/investAPI";
option java_package = "ru.tinkoff.piapi.contract.v1";
option java_multiple_files = true;
option csharp_namespace = "Tinkoff.InvestAPI.V1";
option objc_class_prefix = "TIAPI";
option php_namespace = "Tinkoff\\Invest\\V1";

import "google/protobuf/timestamp.proto";
import "common.proto";
import "orders.proto";
import "operations.proto";
import "users.proto";

service SandboxService { //Сервис для работы с песочницей Public API
  rpc OpenSandboxAccount(OpenSandboxAccountRequest) returns (OpenSandboxAccountResponse); //Метод регистрации счёта в песочнице
  rpc GetSandboxAccounts(GetAccountsRequest) returns (GetAccountsResponse); //Метод получения счетов в песочнице
  rpc CloseSandboxAccount(CloseSandboxAccountRequest) returns (CloseSandboxAccountResponse); //Метод закрытия счёта в песочнице

  rpc PostSandboxOrder(PostOrderRequest) returns (PostOrderResponse); //Метод выставления торгового поручения в песочнице
  rpc GetSandboxOrders(GetOrdersRequest) returns (GetOrdersResponse); //Метод получения списка активных заявок по счёту в песочнице
  rpc CancelSandboxOrder(CancelOrderRequest) returns (CancelOrderResponse); //Метод отмены торгового поручения в песочнице
  rpc GetSandboxOrderState(GetOrderStateRequest) returns (OrderState); //Метод получения статуса заявки в песочнице

  rpc GetSandboxPositions(PositionsRequest) returns (PositionsResponse); //Метод получения позиций по виртуальному счёту песочницы
  rpc GetSandboxOperations(OperationsRequest) returns (OperationsResponse); //Метод получения операций в песочнице по номеру счёта
  rpc GetSandboxPortfolio(PortfolioRequest) returns (PortfolioResponse); //Метод получения портфолио в песочнице

  rpc SandboxPayIn(SandboxPayInRequest) returns (SandboxPayInResponse); //Метод пополнения счёта в песочнице
}

message OpenSandboxAccountRequest {
  //пустой запрос
}

message OpenSandboxAccountResponse {
  string account_id = 1; //Номер счёта
}

message CloseSandboxAccountRequest {
  string account_id = 1; //Номер счёта
}

message CloseSandboxAccountResponse {
  //пустой ответ
}

message SandboxPayInRequest {
  string account_id = 1; //Номер счёта
  MoneyValue amount = 2; //Сумма пополнения счёта в рублях
}

message SandboxPayInResponse {
  MoneyValue balance = 1; //Текущий баланс счёта
}
syntax = "proto3";

package tinkoff.public.invest.api.contract.v1;

option go_package = "Tinkoff/investAPI";
option java_package = "ru.tinkoff.piapi.contract.v1";
option java_multiple_files = true;
option csharp_namespace = "Tinkoff.InvestAPI.V1";
option objc_class_prefix = "TIAPI";
option php_namespace = "Tinkoff\\Invest\\V1";

import "google/protobuf/timestamp.proto";
import "common.proto";

service StopOrdersService { /* Сервис предназначен для работы со стоп-заявками:</br> **1**.
                               выставление;</br> **2**. отмена;</br> **3**. получение списка стоп-заявок.*/
  rpc PostStopOrder(PostStopOrderRequest) returns (PostStopOrderResponse); //Метод выставления стоп-заявки
  rpc GetStopOrders(GetStopOrdersRequest) returns (GetStopOrdersResponse); //Метод получения списка активных стоп заявок по счёту
  rpc CancelStopOrder(CancelStopOrderRequest) returns (CancelStopOrderResponse); //	Метод отмены стоп-заявки
}

message PostStopOrderRequest {
  string figi = 1; //Figi-идентификатор инструмента
  int64 quantity = 2; //Количество лотов
  Quotation price = 3; //Цена лота
  Quotation stop_price = 4; //Стоп-цена заявки
  StopOrderDirection direction = 5; //Направление операции
  string account_id = 6; //Номер счёта
  StopOrderExpirationType expiration_type = 7; //Тип экспирации заявки
  StopOrderType stop_order_type = 8; //Тип заявки
  google.protobuf.Timestamp expire_date = 9; //Дата и время окончания действия стоп-заявки в часовом поясе UTC. **Для ExpirationType = GoodTillDate заполнение обязательно**.
}

message PostStopOrderResponse {
  string stop_order_id = 1; //Уникальный идентификатор стоп-заявки.
}

message GetStopOrdersRequest {
  string account_id = 1; //Идентификатор счёта клиента
}

message GetStopOrdersResponse {
  repeated StopOrder stop_orders = 1; //Массив стоп-заявок по счёту
}

message CancelStopOrderRequest {
  string account_id = 1; //Идентификатор счёта клиента
  string stop_order_id = 2; //Уникальный идентификатор стоп-заявки.
}

message CancelStopOrderResponse {
  google.protobuf.Timestamp time = 1; //Время отмены заявки в часовом поясе UTC
}

message StopOrder {
  string stop_order_id = 1; //Идентификатор-идентификатор стоп-заявки
  int64 lots_requested = 2;  //Запрошено лотов
  string figi = 3; //Figi-идентификатор инструмента
  StopOrderDirection direction = 4; //Направление операции
  string currency = 5;  //Валюта стоп-заявки
  StopOrderType order_type = 6; //Тип стоп-заявки
  google.protobuf.Timestamp create_date = 7; //Дата и время выставления заявки в часовом поясе UTC
  google.protobuf.Timestamp activation_date_time = 8; //Дата и время конвертации стоп-заявки в биржевую в часовом поясе UTC
  google.protobuf.Timestamp expiration_time = 9; //Дата и время снятия заявки в часовом поясе UTC
}

enum StopOrderDirection {//Направление операции
  STOP_ORDER_DIRECTION_UNSPECIFIED = 0; //Значение не указано
  STOP_ORDER_DIRECTION_BUY = 1; //Покупка
  STOP_ORDER_DIRECTION_SELL = 2; //Продажа
}

enum StopOrderExpirationType {
  STOP_ORDER_EXPIRATION_TYPE_UNSPECIFIED = 0; //Значение не указано.
  STOP_ORDER_EXPIRATION_TYPE_GOOD_TILL_CANCEL = 1; //Действительно до отмены.
  STOP_ORDER_EXPIRATION_TYPE_GOOD_TILL_DATE = 2; //Действительно до даты снятия.
}

enum StopOrderType {
  STOP_ORDER_TYPE_UNSPECIFIED = 0; //Значение не указано
  STOP_ORDER_TYPE_TAKE_PROFIT = 1; //Take-profit заявка
  STOP_ORDER_TYPE_STOP_LOSS = 2; //Stop-loss заявка
  STOP_ORDER_TYPE_STOP_LIMIT = 3; //Stop-limit заявка
}syntax = "proto3";

package tinkoff.public.invest.api.contract.v1;

option go_package = "Tinkoff/investAPI";
option java_package = "ru.tinkoff.piapi.contract.v1";
option java_multiple_files = true;
option csharp_namespace = "Tinkoff.InvestAPI.V1";
option objc_class_prefix = "TIAPI";
option php_namespace = "Tinkoff\\Invest\\V1";

import "google/protobuf/timestamp.proto";
import "common.proto";

service UsersService { /*Сервис предназначен для получения: </br> **1**.
                       списка счетов пользователя; </br> **2**. маржинальных показателе по счёту.*/
  rpc GetAccounts (GetAccountsRequest) returns (GetAccountsResponse); //Метод получения счетов пользователя

  rpc GetMarginAttributes (GetMarginAttributesRequest) returns (GetMarginAttributesResponse); //Расчёт маржинальных показателей по счёту

  rpc GetUserTariff (GetUserTariffRequest) returns (GetUserTariffResponse); //Запрос тарифа пользователя

  rpc GetInfo (GetInfoRequest) returns (GetInfoResponse); //Метод получения информации о пользователе
}

// Запрос получения счетов не имеет входных параметров
message GetAccountsRequest {}

// Ответ на запрос получения счетов.
message GetAccountsResponse {
  // Массив счетов клиента.
  repeated Account accounts = 1;
}

// Счёт клиента.
message Account {

  // Идентификатор счёта.
  string id = 1;

  // Тип счёта.
  AccountType type = 2;

  // Название счёта.
  string name = 3;

  // Статус счёта.
  AccountStatus status = 4;

  // Дата открытия счёта в часовом поясе UTC.
  google.protobuf.Timestamp opened_date = 5;

  // Дата закрытия счёта в часовом поясе UTC.
  google.protobuf.Timestamp closed_date = 6;
}

// Тип счёта.
enum AccountType {
  ACCOUNT_TYPE_UNSPECIFIED = 0; //Тип аккаунта не определён.
  ACCOUNT_TYPE_TINKOFF = 1; //Брокерский счёт Тинькофф.
  ACCOUNT_TYPE_TINKOFF_IIS = 2; //ИИС счёт.
  ACCOUNT_TYPE_INVEST_BOX = 3; //Инвесткопилка.
}

// Статус счёта.
enum AccountStatus {
  ACCOUNT_STATUS_UNSPECIFIED = 0; //Статус счёта не определён.
  ACCOUNT_STATUS_NEW = 1; //Новый, в процессе открытия.
  ACCOUNT_STATUS_OPEN = 2; //Открытый и активный счёт.
  ACCOUNT_STATUS_CLOSED = 3; //Закрытый счёт.
}

// Запрос маржинальных показателей по счёту
message GetMarginAttributesRequest {

  // Идентификатор счёта пользователя.
  string account_id = 1;
}

// Маржинальные показатели по счёту.
message GetMarginAttributesResponse {

  // Ликвидная стоимость портфеля. Подробнее: [что такое ликвидный портфель?](https://help.tinkoff.ru/margin-trade/short/liquid-portfolio/).
  MoneyValue liquid_portfolio = 1;

  // Начальная маржа — начальное обеспечение для совершения новой сделки. Подробнее: [начальная и минимальная маржа](https://help.tinkoff.ru/margin-trade/short/initial-and-maintenance-margin/).
  MoneyValue starting_margin = 2;

  // Минимальная маржа — это минимальное обеспечение для поддержания позиции, которую вы уже открыли. Подробнее: [начальная и минимальная маржа](https://help.tinkoff.ru/margin-trade/short/initial-and-maintenance-margin/).
  MoneyValue minimal_margin = 3;

  // Уровень достаточности средств. Соотношение стоимости ликвидного портфеля к начальной марже.
  Quotation funds_sufficiency_level = 4;

  // Объем недостающих средств. Разница между стартовой маржой и ликвидной стоимости портфеля.
  MoneyValue amount_of_missing_funds = 5;
}

message GetUserTariffRequest {
}

message GetUserTariffResponse {
  repeated UnaryLimit unary_limits = 1; //Массив лимитов пользователя по unary-запросам
  repeated StreamLimit stream_limits = 2; //Массив лимитов пользователей для stream-соединений
}

message UnaryLimit {
  int32 limit_per_minute = 1; //Количество unary-запросов в минуту
  repeated string methods = 2; //Названия методов
}

message StreamLimit {
  int32 limit = 1; //Максимальное количество stream-соединений
  repeated string streams = 2; //Названия stream-методов
}

message GetInfoRequest {
}

message GetInfoResponse {
  bool prem_status = 1; //Признак премиум клиента.
  bool qual_status = 2; //Признак квалифицированного инвестора.
  repeated string qualified_for_work_with = 3; //Набор требующих тестирования инструментов и возможностей, с которыми может работать пользователь.
}